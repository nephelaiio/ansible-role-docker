---
- name: Remove incompatible packages
  ansible.builtin.package:
    name: "{{ docker_remove_packages }}"
    state: absent
  when: docker_remove_packages is defined
  tags: install

- name: Configure apt repository
  when:
    - ansible_os_family == "Debian"
    - docker_repo_manage
  tags: install
  block:

    - name: Install Debian package requirements
      ansible.builtin.package:
        name:
          - apt-transport-https
          - ca-certificates
          - python3-docker
          - curl

    - name: Install helper packages
      ansible.builtin.package:
        name: "{{ _docker_packages_helpers }}"
        state: "{{ docker_packages_state }}"

    - name: Install apt key
      ansible.builtin.apt_key:
        keyserver: "{{ docker_deb_repo.keyserver }}"
        state: present
        id: "{{ docker_deb_repo.key }}"
      ignore_errors: true
      register: apt_key_module

    - name: Force install apt key
      ansible.builtin.shell: |
        curl -fsSL {{ docker_deb_repo.keyserver }} | sudo apt-key add -
      when: apt_key_module.failed
      tags: skip_ansible_lint

    - name: Install apt repository
      ansible.builtin.apt_repository:
        repo: "{{ docker_deb_repo.url }}"
        state: "{{ docker_repo_state }}"
        filename: docker
        validate_certs: no
      when: ansible_os_family == "Debian"

- name: Configure yum repository
  when:
    - ansible_os_family == "RedHat"
    - docker_repo_manage
  tags: install
  block:

    - name: Install yum repository
      ansible.builtin.get_url:
        url: "{{ docker_rpm_repo.url }}"
        dest: /etc/yum.repos.d/docker.repo
        mode: 0644
      when: docker_repo_state != 'absent'

    - name: Remove yum repository
      ansible.builtin.file:
        dest: /etc/yum.repos.d/docker.repo
        state: absent
      when: docker_repo_state == 'absent'

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Release package holds
  ansible.builtin.include_tasks: lock.yml
  vars:
    _lock_state: install

- name: Install packages
  block:
    - name: Install docker packages
      ansible.builtin.package:
        name: "{{ docker_packages }}"
        state: "{{ docker_packages_state }}"
      when: ansible_os_family != "Debian"
      tags: install

    - name: Install apt packages
      ansible.builtin.apt:
        name: "{{ docker_packages }}"
        state: "{{ docker_packages_state }}"
        allow_unauthenticated: true
        update_cache: true
      when: ansible_os_family == "Debian"
      tags: install

  always:
    - name: Configure package holds
      ansible.builtin.include_tasks: lock.yml
      vars:
        _lock_state: hold

- name: Configure service
  when: docker_packages_state != 'absent'
  block:

    - name: Configure service path
      ansible.builtin.file:
        path: "{{ docker_configuration_path }}"
        state: directory
      tags: install

    - name: Configure systemd service
      when: docker_service_manage
      tags: install
      block:

        - name: Configure service
          ansible.builtin.template:
            src: "{{ docker_configuration_template }}"
            dest: "{{ docker_configuration_file }}"

        - name: Include service tasks
          ansible.builtin.include_tasks: service.yml

    - name: Configure logging
      ansible.builtin.copy:
        dest: "{{ docker_log_conf_file }}"
        content: "{{ docker_log_conf | to_nice_json(indent=2) }}"
      notify: restart docker service
      when: docker_log_conf_manage
      tags: configure

    - name: Manage docker groups
      ansible.builtin.group:
        name: "{{ docker_group }}"
      when: docker_group_manage
      tags: configure

    - name: Manage docker users
      ansible.builtin.user:
        append: true
        groups: "{{ docker_group }}"
        name: "{{ docker_user }}"
      when: docker_user_manage
      tags: configure

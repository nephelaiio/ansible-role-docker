---
# Include variable definitions
- name: include variable overrides
  include_vars: "{{ item }}"
  with_first_found:
    - "vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "vars/{{ ansible_distribution }}.yml"
    - "vars/{{ ansible_os_family }}.yml"
  tags:
    - docker

# Remove incompatible packages
- name: remove incompatible packages
  package:
    name: "{{ docker_remove_packages }}"
    state: absent
  when:
    - docker_remove_packages is defined
  become: yes
  tags:
    - docker

# Install apt helper packages
- name: install apt helper packages
  package:
    name: "{{ docker_packages_helpers }}"
    state: "{{ docker_packages_state }}"
  when: ansible_os_family == "Debian"
  become: yes
  tags:
    - docker

# Install docker-py
- name: install docker-py
  pip:
    name: "{{ docker_pip_helpers }}"
    state: "{{ docker_packages_state }}"
  when: docker_pip_helpers != []
  become: yes
  tags:
    - docker

# Install docker repository
- name: install docker apt repository
  apt_repository:
    repo: "{{ docker_repo_url }}"
    state: present
    filename: docker
  when: ansible_os_family == "Debian"
  become: yes
  tags:
    - docker

# Install docker repository key
- name: install docker apt key
  apt_key:
    keyserver: "{{ docker_repo_keyserver }}"
    state: present
    id: "{{ docker_repo_key_id }}"
  when: ansible_os_family == "Debian"
  become: yes
  tags:
    - docker

# Install docker repository
- name: install docker yum repository
  yum_repository:
    baseurl: "{{ docker_repo_url }}"
    name: docker
    description: "Docker Repository"
    gpgcheck: yes
    gpgkey: "{{ docker_repo_gpgkey }}"
  when: ansible_os_family == "RedHat"
  become: yes
  tags:
    - docker
  notify:
    - apt update

# Install packages
- name: install docker packages
  package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
  when: ansible_os_family == "RedHat"
  become: yes
  tags:
    - docker
  notify:
    - restart docker services

# Install packages
- name: install docker packages
  package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
  when: ansible_os_family == "Archlinux"
  become: yes
  changed_when: false
  tags:
    - docker
  notify:
    - restart docker services

# Install packages
- name: install docker packages
  package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
    allow_unauthenticated: yes
  when: ansible_os_family == "Debian"
  become: yes
  tags:
    - docker
  notify:
    - restart docker services

# Configure docker paths
- name: configure docker service path
  file:
    path: "{{ docker_configuration_path }}"
    state: directory
  become: yes
  tags:
    - docker
  notify:
    - restart docker services

# Configure docker
- name: configure docker service
  template:
    src: "{{ docker_configuration_template }}"
    dest: "{{ docker_configuration_file }}"
  become: yes
  notify:
    - restart docker services

# Manage service
- name: manage docker services
  service:
    name: "{{ docker_service_name }}"
    state: "{{ docker_service_state }}"
  become: yes
  changed_when: false
  tags:
    - docker
    - docker_service

# Manage groups
- name: manage docker groups
  group:
    name: "{{ docker_group }}"
  become: yes
  tags:
    - docker
    - docker_service

# Manage users
- name: manage docker users
  user:
    append: yes
    groups: "{{ docker_group }}"
    name: "{{ item }}"
  become: yes
  with_items: "{{ docker_users }}"
  tags:
    - docker
    - docker_service
